// G√©n√®re un nombre al√©atoire entre 1 et 100.
let randomNumber = generateRandomNumber();
// Initialise le compteur d'essais √† 0.
let attempts = 0;
// Initialise le meilleur score √† null.
let bestScore = null;

// Cr√©e un nouvel objet Audio pour le son de victoire.
const victorySound = new Audio('win.mp3');

// S√©lectionne les √©l√©ments HTML et les stocke dans un objet.
const elements = {
    guessInput: document.getElementById('guess-input'),
    guessButton: document.getElementById('guess-btn'),
    resultMessage: document.getElementById('result-msg'),
    bestScoreDisplay: document.getElementById('best-score'),
    modal: document.getElementById('modal'),
    modalMessage: document.getElementById('modal-msg'),
    modalRestartButton: document.getElementById('modal-restart-btn'),
    closeModal: document.querySelector('.close'),
    restartButton: document.getElementById('restart-btn')
};

// Ajoute des √©couteurs d'√©v√©nements aux boutons et √©l√©ments pertinents.
elements.guessButton.addEventListener('click', handleGuess);
elements.modalRestartButton.addEventListener('click', resetGame);
elements.closeModal.addEventListener('click', () => { elements.modal.style.display = 'none'; });
window.addEventListener('click', (event) => { if (event.target === elements.modal) { elements.modal.style.display = 'none'; } });
elements.restartButton.addEventListener('click', resetGame);

// Fonction pour g√©n√©rer un nombre al√©atoire entre 1 et 100.
function generateRandomNumber() {
    return Math.floor(Math.random() * 100) + 1;
}

// Fonction pour g√©rer l'√©v√©nement de devinette.
function handleGuess() {
    const guess = parseInt(elements.guessInput.value);

    // V√©rifie si l'entr√©e est un nombre valide entre 1 et 100.
    if (isNaN(guess) || guess < 1 || guess > 100) {
        showMessage('‚ö†Ô∏è Veuillez entrer un nombre valide entre 1 et 100. ‚ö†Ô∏è', 'warning');
        return;
    }

    // Incr√©mente le compteur d'essais.
    attempts++;

    // V√©rifie si la devinette est correcte.
    if (guess === randomNumber) {
        elements.resultMessage.textContent = '';
        elements.modalMessage.textContent = `F√©licitations ! Vous avez devin√© le nombre en ${attempts} tentatives.`;
        elements.guessInput.disabled = true;
        elements.guessButton.disabled = true;
        victorySound.play();
        updateBestScore();
        elements.modal.style.display = 'block';
        elements.restartButton.style.display = 'block';
    } else {
        // Affiche un message d'indice selon que le nombre devin√© est plus petit ou plus grand que le nombre al√©atoire.
        showMessage(guess < randomNumber ? 'üîé Le nombre est plus grand. Essayez encore. üîé' : 'üîé Le nombre est plus petit. Essayez encore. üîé', 'hint');
    }
}

// Affiche un message avec la classe CSS sp√©cifi√©e.
function showMessage(message, className) {
    elements.resultMessage.textContent = message;
    elements.resultMessage.className = className;
}

// Met √† jour le meilleur score si l'actuel est inf√©rieur au pr√©c√©dent.
function updateBestScore() {
    if (bestScore === null || attempts < bestScore) {
        bestScore = attempts;
        elements.bestScoreDisplay.textContent = `Meilleur score : ${bestScore}`;
    }
}

// R√©initialise le jeu en r√©initialisant les valeurs et en g√©n√©rant un nouveau nombre al√©atoire.
function resetGame() {
    randomNumber = generateRandomNumber();
    attempts = 0;
    elements.guessInput.disabled = false;
    elements.guessButton.disabled = false;
    elements.guessInput.value = '';
    elements.resultMessage.textContent = '';
    elements.modal.style.display = 'none';
    elements.restartButton.style.display = 'none';
}
